# -*- coding: utf-8 -*-

"""
    flowroutenumbersandmessaging.models.attributes_28

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
"""


class Attributes28(object):

    """Implementation of the 'Attributes28' model.

    TODO: type model description here.

    Attributes:
        alias (string): TODO: type description here.
        cnam_lookups_enabled (bool): TODO: type description here.
        number_type (NumberTypeEnum): TODO: type description here.
        rate_center (string): TODO: type description here.
        state (string): TODO: type description here.
        value (int): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "alias" : "alias",
        "cnam_lookups_enabled" : "cnam_lookups_enabled",
        "number_type" : "number_type",
        "rate_center" : "rate_center",
        "state" : "state",
        "value" : "value"
    }

    def __init__(self,
                 alias=None,
                 cnam_lookups_enabled=None,
                 number_type=None,
                 rate_center=None,
                 state=None,
                 value=None):
        """Constructor for the Attributes28 class"""

        # Initialize members of the class
        self.alias = alias
        self.cnam_lookups_enabled = cnam_lookups_enabled
        self.number_type = number_type
        self.rate_center = rate_center
        self.state = state
        self.value = value


    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        alias = dictionary.get("alias")
        cnam_lookups_enabled = dictionary.get("cnam_lookups_enabled")
        number_type = dictionary.get("number_type")
        rate_center = dictionary.get("rate_center")
        state = dictionary.get("state")
        value = dictionary.get("value")

        # Return an object of this model
        return cls(alias,
                   cnam_lookups_enabled,
                   number_type,
                   rate_center,
                   state,
                   value)


