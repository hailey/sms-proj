# -*- coding: utf-8 -*-

"""
    flowroutenumbersandmessaging.models.data_27

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
"""
import flowroutenumbersandmessaging.models.attributes_28
import flowroutenumbersandmessaging.models.links

class Data27(object):

    """Implementation of the 'Data27' model.

    TODO: type model description here.

    Attributes:
        attributes (Attributes28): TODO: type description here.
        id (string): TODO: type description here.
        links (Links): TODO: type description here.
        relationships (object): TODO: type description here.
        mtype (string): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "attributes" : "attributes",
        "id" : "id",
        "links" : "links",
        "relationships" : "relationships",
        "mtype" : "type"
    }

    def __init__(self,
                 attributes=None,
                 id=None,
                 links=None,
                 relationships=None,
                 mtype='number'):
        """Constructor for the Data27 class"""

        # Initialize members of the class
        self.attributes = attributes
        self.id = id
        self.links = links
        self.relationships = relationships
        self.mtype = mtype


    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        attributes = flowroutenumbersandmessaging.models.attributes_28.Attributes28.from_dictionary(dictionary.get("attributes")) if dictionary.get("attributes") else None
        id = dictionary.get("id")
        links = flowroutenumbersandmessaging.models.links.Links.from_dictionary(dictionary.get("links")) if dictionary.get("links") else None
        relationships = dictionary.get("relationships")
        mtype = dictionary.get("type") if dictionary.get("type") else 'number'

        # Return an object of this model
        return cls(attributes,
                   id,
                   links,
                   relationships,
                   mtype)


